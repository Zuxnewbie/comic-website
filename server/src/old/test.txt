import { Sequelize } from 'sequelize';

const sequelize = new Sequelize('comic', 'root', null, {
     host: 'localhost',
     dialect: 'mysql',
     logging: false
});

const conn = async () => {
     try {
          await sequelize.authenticate();
          console.log("connect succccccc fucking");
     } catch (error) {
          console.log("unable" , error);
     }
}

export default conn




import express from 'express'
import * as authController from '../controllers/auth'

const router = express.Router()
router.get("/login", (req, res) => {
  res.status(200).json("CONNECT SUCCESSFULL BROOOOOO")
})

export default router;




import express from 'express'
import * as authController from '../controllers/auth.js'

const router = express.Router()

router.get("/register", authController.register)

export default router;





// const register = async (req, res) => {
// //   res.status(200).json("CONNECT SUCCESSFULL BROOOOOO");
//   const { name, email, password } = req.body;

//   try {
//     if (!name, !email, !password) {
//         return res.status(400).json({
//             err: 1,
//             msg: "Missing inputs"
//         })
//     }
//     // const response = await authService.res

//   } catch (error) {
//     return res.status(500).json({
//         err: -1,
//         msg: "Fail at auth controller: ", 
//         error: error.message 
//     });
//   }
// };











export const getAllComicByCategoryLimitService = () => {
    return new Promise(async (resolve, reject) => {
        try {
            
            const stories = await db.Story.findAll({
                attributes: [
                    'story_id',
                    'name',
                    'image',
                    [Sequelize.literal('(SELECT COUNT(*) FROM Chapters WHERE Chapters.story_id = Story.story_id)'), 'chapter_count'],
                    [Sequelize.literal('(SELECT MAX(updatedAt) FROM Chapters WHERE Chapters.story_id = Story.story_id)'), 'lastUpdated'],
                    [
                      Sequelize.literal(`CASE
                        WHEN TIMESTAMPDIFF(MINUTE, (SELECT MAX(updatedAt) FROM Chapters WHERE Chapters.story_id = Story.story_id), NOW()) < 60 THEN CONCAT(TIMESTAMPDIFF(MINUTE, (SELECT MAX(updatedAt) FROM Chapters WHERE Chapters.story_id = Story.story_id), NOW()), ' minutes ago')      
                        WHEN TIMESTAMPDIFF(HOUR, (SELECT MAX(updatedAt) FROM Chapters WHERE Chapters.story_id = Story.story_id), NOW()) < 24 THEN CONCAT(TIMESTAMPDIFF(HOUR, (SELECT MAX(updatedAt) FROM Chapters WHERE Chapters.story_id = Story.story_id), NOW()), ' hours ago')
                        WHEN TIMESTAMPDIFF(DAY, (SELECT MAX(updatedAt) FROM Chapters WHERE Chapters.story_id = Story.story_id), NOW()) < 30 THEN CONCAT(TIMESTAMPDIFF(DAY, (SELECT MAX(updatedAt) FROM Chapters WHERE Chapters.story_id = Story.story_id), NOW()), ' days ago')
                        ELSE CONCAT(TIMESTAMPDIFF(MONTH, (SELECT MAX(updatedAt) FROM Chapters WHERE Chapters.story_id = Story.story_id), NOW()), ' months ago')
                      END`),
                      'timeSinceLastUpdate'
                    ]
                  ],
                  include: [{
                    model: db.StoryCategory,
                    attributes: [],
                    include: [{
                      model: db.Category,
                      where: { name: 'Hài Hước' },
                      attributes: ['category_id', 'name', 'description', 'createdAt', 'updatedAt']
                    }]
                  }]
            });

            resolve({
                err: stories.length ? 0 : 1,
                msg: stories.length ? "OK" : "Failed to get comic by category",
                stories
            });
        } catch (error) {
            reject({
                err: -1,
                msg: "Failed at story controller =>>> ",
                error
            });
        }
    });
};